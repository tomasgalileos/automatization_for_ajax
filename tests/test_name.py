import pytestfrom unittest.mock import patchfrom typing import Listfrom test_param import CHECK_COLOR_PARAM, CHECK_INVALID_COLOR, CHECK_QR_IN_DB, \    CHECK_ERROR_CONNECT, CHECK_DEVICE_SUCCESS, CHECK_OUT_LIST@pytest.mark.parametrize("qr, exp_color", CHECK_COLOR_PARAM)def test_check_len_color(check_qr, qr: str, exp_color: str) -> None:    assert check_qr.check_len_color(qr) == exp_color@pytest.mark.parametrize("qr, exp_res", CHECK_INVALID_COLOR)def test_check_len_color_invalid_qr(check_qr, qr: str, exp_res: None) -> None:    assert check_qr.check_len_color(qr) is exp_res@pytest.mark.parametrize('qr, flag_db, exp_res', CHECK_OUT_LIST)def test_scan_check_out_list(check_qr, qr: str, flag_db: bool, exp_res: List) -> None:    with patch('scanner_handler.CheckQr.check_in_db', return_value=flag_db):        assert len(check_qr.scan_check_out_list(qr)) == len(exp_res)        for i in range(len(check_qr.scan_check_out_list(qr))):            assert check_qr.scan_check_out_list(qr)[i]() == exp_res[i]@pytest.mark.parametrize("qr", CHECK_QR_IN_DB)@patch('scanner_handler.CheckQr.check_in_db', return_value=False)@patch('scanner_handler.CheckQr.send_error')def test_check_scanned_device_error(mock_send_error, mock_check_in_db, check_qr, qr: str) -> None:    mock_check_in_db.side_effect = ConnectionError    with pytest.raises(ConnectionError):        check_qr.check_scanned_device(qr)        mock_send_error.assert_called_with("Not in DB")@pytest.mark.parametrize("qr", CHECK_ERROR_CONNECT)@patch('scanner_handler.CheckQr.check_in_db', return_value=True)def test_check_scanned_device_failure(mock_check_in_db, check_qr, qr: str) -> None:    with patch('scanner_handler.CheckQr.send_error') as mock_send_error:        check_qr.check_scanned_device(qr)        mock_send_error.assert_called_once_with(            f'Error: Wrong qr length {len(qr)}')@pytest.mark.parametrize("qr, exp_res", CHECK_DEVICE_SUCCESS)@patch('scanner_handler.CheckQr.check_in_db', return_value=True)def test_check_scanned_device_success(mock_check_in_db, check_qr, qr: str, exp_res: str) -> None:    with patch(            'scanner_handler.CheckQr.can_add_device') as mock_can_add_device:        check_qr.check_scanned_device(qr)        mock_can_add_device.assert_called_once_with(exp_res)