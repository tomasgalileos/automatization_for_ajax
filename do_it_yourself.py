import refrom collections import defaultdictdef search_data(file_object) -> tuple[dict, list]:    result_dict = defaultdict(int)    fail_devices = []    element_id = r"\d+;([^;]+);"    pattern_true = r"\b(BIG)\b.*\b(02)\b"    pattern_false = r"\b(BIG)\b.*\b(DD)\b"    with open(file_object, "r", errors='ignore') as file:        line = file.readline()        while line:            match_id = re.search(element_id, line)            match_data_true = re.search(pattern_true, line)            match_data_false = re.search(pattern_false, line)            if match_id:                if match_data_false and match_id.group(1) not in fail_devices:                    fail_devices.append(match_id.group(1))                if match_data_true:                    result_dict[match_id.group(1)] += 1            line = file.readline()    return result_dict, fail_devicesdef print_result(file_object) -> None:    pass_d, fail_d = search_data(file_object)    if len(fail_d) > 0:        print(f"{'_' * 15}Failed test {len(fail_d)} devices{'_' * 15}")        for device in fail_d:            print(f"Device {device} was removed")    if len(pass_d) > 0:        print(f"{'_' * 15}Success test {len(pass_d) - len(fail_d)} devices{'_' * 15}")        for key, value in pass_d.items():            if key not in fail_d:                print(f"Device {key} sent {value} statuses")if __name__ == "__main__":    print_result('app_2.log')